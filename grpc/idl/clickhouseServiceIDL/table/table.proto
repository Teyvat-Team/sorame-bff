syntax = "proto3";

package table;

import "base.proto";


service TableService {
    // 数据源下的所有表
    rpc List (TableRequest) returns (TableResponse) {}
    // 数据源中表的 schema
    rpc Schema (TableSchemaRequest) returns (TableSchemaResponse) {}
    // 数据集中单个数据表信息
    rpc Info (DataTableInfoRequest) returns (DataTableInfoResponse) {}
}


/** 数据源下的所有表 ***********************************************/

message TableRequest {
    string dataSourceName = 1; // 数据源名称（数据源名称需要唯一，否则需要一个id）
}

message TableResponse {
    repeated TableList data = 1;
    base.BaseResp baseResp = 255;
}

message TableList {
    string dbName = 1;
    repeated DBTable dbTable = 2;
}

message DBTable {
    string tableName = 1;
    string tableId = 2;
}

/** 数据源中表的 schema ********************************************/

message TableSchemaRequest {
    string dataSourceName = 1; // 数据源名称
    string dbName = 2; // 数据库名称
    string tableId = 3; // 表 id
}

message TableSchemaResponse {
    repeated Schema schema = 1; // 表名
    base.BaseResp baseResp = 255;
}

message Schema {
    string name = 1;
    string type = 2;
    string descr = 3;
    bool isPartition = 4;
}

/** 数据集中单个数据表信息 *****************************************/

message DataTableInfoRequest {
    string datasetId = 1; // 数据集 id
    string dataTableId = 2; // 数据表 id
}

message DataTableInfoResponse {
    // 1-6 是数据集的字段，而不是表的字段
    /** dataset createTime, timestamp in ms*/
    string createTime = 1;
    /** dataset name*/
    string name = 2;
    /** dataset description*/
    string descr = 3;
    /** dataset source type*/
    string dataSourceType = 4;
    /** dataset id 数据集id */
    string id = 5;
    /** dataset createUser*/
    string createUser = 6;
    // 7-13 是表的字段
    /** database name from where the table created*/
    string dbName = 7;
    /** table name*/
    string tableName = 8;
    /** table id*/
    string tableId = 9;
    /** table schema*/
    repeated Schema schema = 10;
    // 维度
    repeated DimensionList dimensionList = 11;
    // 指标
    repeated MetricList metricList = 12;
    // 操作算子
    repeated FunctionList functionList = 13;
    base.BaseResp baseResp = 255;
}

message DimensionList {
    string name = 1;
    string type = 2;
    string descr = 3;
    bool isPartition = 4;
}

message MetricList {
    string name = 1;
    string type = 2;
    string descr = 3;
    bool isPartition = 4;
}

message FunctionList {
    string name = 1;
    string value = 2;
}